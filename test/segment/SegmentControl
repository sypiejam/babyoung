import styled from 'styled-components';

/**
 * 
 * @name SegmentControl 
 * @role 세그먼트를 구성하는 컴퍼넌트입니다.
 * @props id(number) : 세그먼트 id값으로 input과 label을 연결하며 각 세그먼트별로 고유한 id를 설정합니다.
 * @props title(string) : 세그먼트 타이틀명입니다.
 * @props onChange(function) : 세그먼트 onChange이벤트
 * @props disabled(boolean) : 세그먼트들이 disabled상태라면 속성을 추가합니다.
*/

function SegmentControl({groupname, idx, activeIdx, id, title, onChange, disabled}){
    return(
        <>
            <StyledSegmentInput
                type="radio" 
                name={groupname} 
                id={id} 
                value={title} 
                checked={activeIdx === idx} 
                onChange={ ()=> onChange(idx) }
                disabled={disabled}
            />
            <StyledSegmentLabel htmlFor={id}><span className="label_txt">{title}</span></StyledSegmentLabel> {/* 퍼블검수 1차 : label_txt 클래스 추가 */}
        </>
    )
}
const StyledSegmentInput = styled.input`
    overflow:hidden;
    position:absolute;
    width:1px;
    height:1px;
    margin:-1px;
    color:transparent;
    clip:rect(0 0 0 0);
`

//퍼블검수 1차 : 디자인 수정 반영(css 개발에 전체반영해주세요)
const StyledSegmentLabel = styled.label`
    position:relative;
    flex:1;
    display:flex;
    align-items:center;
    align-self:stretch;
    justify-content:center;
    min-height:4rem; //2023-06-07 추가
    padding:1.1rem 0.3rem;
    background:#f7f9fc;
    color:#686e75;
    line-height:1.2; //2023-06-07 추가
    font-size:1.5rem;
    text-align:center;
    word-break:break-all;
    &:first-of-type{
        border-radius:0.6rem 0 0 0.6rem;
    }
    &:last-of-type{
        border-radius:0 0.6rem 0.6rem 0;
    }
    ~ label:before{
        content:'';
        position:absolute;
        top:50%;
        left:0;
        width:0.1rem;
        height:1.6rem;
        background:#d5dbe3;
        transform:translateY(-50%);
    }
    .label_txt{
        display:block;
        line-height:1.2;
    }
`
export default SegmentControl

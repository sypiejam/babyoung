import { useState, useEffect, cloneElement } from "react";

/**
 * @name PasswordField 
 * @role input Password 단일 컴포넌트
 * @props status(string): disabled(비활성화), readOnly(읽기만 가능 할 경우), error 상태일 경우
 * @props subText(string): '4자'와 같이 입력개수를 표기해줄 경우 사용
 * @props setValue(function): onChange Event를 통한 value 값 입력
 * @props value(string): 특정 value 값 직접 세팅
 * @props placeholder(string): 동그라미로 표시됨
 * @props securityKeypadMode(boolean): 보안키패드를 위해 input을 readonly 형식으로 변환한다. (※주의 status props와 동시 사용하지 않는다.)
 * @props inputRef: input ref 참조
 * @props focusEvent: input value 값을 입력했을 경우 다음 엘리먼트에 focus를 주기 위한 함수. ※ maxLength가 존재하는 경우에만 실행 됨
 * @props onChange(function)
 * @props 그 외 input attributes
 * @example
 *      ■ input value 값 직접 세팅 시 활용방법
 *       const [changeValue, setChangeValue] = useState(); // input onChange 이벤트를 통해 얻어진 value 값 추출 시 사용
 *       const [inputValue, setInputValue] = useState('0000'); // 직접 input에 세팅할 value 값, 초기값은 default 값이 된다.
 * 
 *       <PasswordField
 *                    value={inputValue}
 *                    setValue={value => {
 *                                  setChangeValue(value); 
 *                                  setInputValue(null); // ※ inputValue(직접 입력 값) null 처리 필수
 *                    }}
 *        />
 *       [결과출력] onChange 이벤트를 통해 얻어진 value 값 : {changeValue} / inputValue를 통해 얻어진 value 값 : {inputValue}
 * 
 *      ■ focusEvent 활용
 *        const inputRef = useRef([]);
 *        const handleInputFocus = index => {
 *                inputRef.current[index+1].focus(); // 다음 엘리먼트를 index 값으로 참조
 *        }
 *        return (
 *            <NormalTextField type="number" maxLength={4} inputRef={el => inputRef.current[0] = el} focusEvent={() => handleInputFocus(0)}/>
 *            <PasswordField type="number" maxLength={4} inputRef={el => inputRef.current[1] = el} focusEvent={() => handleInputFocus(1)}/>
 *        )
 **/ 
function PasswordField(props) {
    const classNames = [
        "inp_field ",
        props?.securityKeypadMode ? ` pw_field` : '',
        (props?.status==="error") ? ` is-error` : "",
    ].join("");

    const [inputElementType, setInputElementType] = useState('default');
    useEffect(() => {
        const { securityKeypadMode } = props;
        if (securityKeypadMode) {
            setInputElementType('securityKeypadMode');
        } else {
            setInputElementType('default');
        }
    }, [])
   
    return (
        <div className={classNames}>
            <CustomInputElement elementType={inputElementType} {...props} />
        </div>
    )
}

export default PasswordField;

export const CustomInputElement = ({ elementType, ...props}) => {
    return ( 
        {
            'default': cloneElement(<InputElement {...props} />),
            'securityKeypadMode': cloneElement(<InputElement {...props} />, { readOnly: true })
        }[elementType]
    )
}

export const InputElement = ({ status, setValue, value, securityKeypadMode, onChange, subText, inputRef, focusEvent, placeholder, ...rest }) => {
    const [placeholderValue, setPlaceholderValue] = useState(placeholder);
    const [changeValue, setChangeValue] = useState(value);

    const handleInputChangeEvent = e => {
        setChangeValue(e.target.value);
        setValue && setValue(e.target.value);

        onChange && onChange(e);
    }

    useEffect(() => {
        changeValue ? setPlaceholderValue('') : (placeholder && setPlaceholderValue(placeholder))
    }, [changeValue])

    useEffect(() => {
        if(value) {
            setPlaceholderValue('')
            setChangeValue(value);
        }
    }, [value])

    return  ( 
        <div className="inp_password">
            <div className="inp_item">
                <input type="password" 
                        value={(value || value === '') ? value : (changeValue || '')}
                        ref={inputRef} 
                        className="inp_text"
                        placeholder=""
                        onChange={handleInputChangeEvent}
                        onInput={e => {
                            const { value, maxLength } = e.target;
                            if((maxLength > 0) && value.length >= maxLength) {
                                e.target.value = value.slice(0, maxLength);
                                focusEvent && focusEvent();
                            }
                        }}
                        {...rest}
                />
                { subText &&
                    <span className="inp_word">{subText}</span>
                }
            </div>
            <div className={`inp_pwshadow ${placeholderValue ? '' : 'filled'}`}>
                {
                    changeValue ? [...changeValue].map((_, index) => <i key={index} className="item"></i>)
                                : placeholderValue && [...placeholderValue].map((_, index) => <i key={index} className="item"></i>)
                }
            </div>
        </div>
    )
}

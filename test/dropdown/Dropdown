import SmallLoadingBar from "../pageController/SmallLoadingBar";
import { useTranslation } from "react-i18next"; //2023-05-16 추가
/**
 * @name Dropdown 
 * @role 여러 선택 항목 중 하나만 선택할 경우 사용되며, 선택지는 바텀시트로 제공하지만 선택지에서 form요소를 사용하는 경우에는 풀팝업으로 제공할 수 있다.
 * @props type(string) - 기본형 : normal, 아이콘형 : icon, 텍스트형 : text, 계좌형 : account
 * @props status(string) - 기본 상태는 enabled   //2023-05-22 문구 수정
 *                      filled : 사용자가 입력을 완료한 상태
 *                      disabled : 비활성화 상태로 입력하거나 편집할 수 없는 상태
 *                      readonly : 입력하거나 편집할 수 없는 상태 (아이콘형)
 * @props title(string) - title 문구
 * @props custTit(string) - title 문구외에 아이콘 버튼, 링크버튼이 들어가는 경우 title속성을 사용하지 않고 custTit속성에 마크업을 넣어서 사용. //2023-05-30 추가
 * @props hint(string) - placeholder 역할을 하는 hint 문구
 * @props onClick(function) - click 이벤트 함수
 * @props children - button 태그 내부에 들어가는 아이콘이나 select 마크업
 * @props errorMsg(string) - error 문구
 * @props accountBtm(boolean) - 계좌형에서 출금가능금액이 노출될 경우 사용
 * @props accountNum(string) - 출금가능금액 (accountNum이 없을 경우 SmallLoadingBar 자동으로 노출됨)
 * @props fieldClass(string) - 사용 페이지 내에서 디자인을 위해 더블 클래스가 필요할 경우 클래스 네임 추가
 * @props btmText(string) - 하단에 들어가는 '출금가능금액'이 디폴트 텍스트이고 다른 텍스트가 들어가야할때 사용 //2023-05-23 props 추가
 **/ 

function Dropdown({type, status, title, hint, onClick, children, errorMsg , accountBtm, accountNum, fieldClass, btmText, custTit}) { //2023-05-30 custTit 추가 2023-05-23 props 추가
    const {t} = useTranslation();//2023-05-16 추가
    return  ( 
        <>
            <div className={`field_wrap${fieldClass ? " "+fieldClass : ""}${errorMsg ? " is-error" : ""}`}>
                {title &&
                    <em className="inp_title">{title}</em>
                }
                {custTit &&
                    <>
                        {custTit}
                    </>
                }{/* 2023-05-30 custTit 추가 */}
                {(type === "normal")&&
                    <div className={`inp_field inp_select${status? " "+status:""}`}>
                    {/* 2023-06-23 수정 */}
                        {((status !== "readonly") && (status !== "disabled")) ?
                            <button type="button" onClick={onClick} className="inp_select_item" title={`${hint? hint : (title? title : "") }`}>
                                {children}
                            </button> :
                            <div className="inp_select_item d-flex">
                                {children}
                            </div>
                        }
                    {/* //2023-06-23 수정 */}
                    </div>
                }
                {(type === "icon")&&
                    <div className={`inp_field inp_select${status? " "+status:""}`}>
                    {/* 2023-06-23 수정 */}
                        {((status !== "readonly") && (status !== "disabled")) ?
                            <button type="button" onClick={onClick} className="inp_select_item select_icon" title={`${hint? hint : (title? title : "") }`}>
                                {children}
                            </button> :
                            <div className="inp_select_item select_icon">
                                {children}
                            </div>
                        }
                    {/* //2023-06-23 수정 */}
                    </div>
                }
                {(type ==="text")&&
                    <div className="inp_field inp_select select_text">
                        <button type="button" onClick={onClick} className="inp_select_item select_icon" title={`${hint? hint : (title? title : "") }`}>
                            {children}
                        </button>
                    </div>
                }
                {(type === "account")&&
                    <div className={`inp_field inp_select select_account${status? " "+status:""}`}> {/* 2023-05-16 수정 */}
                        <div className="account_wrap">
                            <button type="button" onClick={onClick} className="inp_select_item account_box" title={`${hint? hint : (title? title : "") }`}>
                                {children}
                            </button>
                            {accountBtm && !accountNum &&
                                <div className="account_btm">
                                    <SmallLoadingBar type="center"/>
                                </div>
                            }
                            {accountBtm && accountNum &&
                                <div className="account_btm">
                                    {/* 2023-05-23 btmText props 케이스 추가 */}
                                    {
                                        !btmText &&
                                        <span className="txt">{t("fx0301_0102")}</span>
                                    }
                                    {
                                        btmText &&
                                        <span className="txt">{btmText}</span>
                                    }
                                    <div className="break"><span className="cur">KRW</span><strong className="num">{accountNum}</strong></div> {/* 2023-05-19 번역코드 적용 */}
                                </div>
                            }
                        </div>
                    </div>
                }
                {errorMsg &&
                    <div className="txt_error">
                        <p>{errorMsg}</p>
                    </div>
                }
            </div>   
             
        </>
    )
  }

export default Dropdown;
